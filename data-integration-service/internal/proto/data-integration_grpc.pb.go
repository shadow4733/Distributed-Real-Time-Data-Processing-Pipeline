// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/data-integration.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataProcessingService_ProcessData_FullMethodName        = "/DataProcessingService/ProcessData"
	DataProcessingService_GetMetadata_FullMethodName        = "/DataProcessingService/GetMetadata"
	DataProcessingService_GetErrorReport_FullMethodName     = "/DataProcessingService/GetErrorReport"
	DataProcessingService_StreamData_FullMethodName         = "/DataProcessingService/StreamData"
	DataProcessingService_ListDataRecords_FullMethodName    = "/DataProcessingService/ListDataRecords"
	DataProcessingService_DeleteDataRecord_FullMethodName   = "/DataProcessingService/DeleteDataRecord"
	DataProcessingService_UpdateDataStatus_FullMethodName   = "/DataProcessingService/UpdateDataStatus"
	DataProcessingService_GetDataStatus_FullMethodName      = "/DataProcessingService/GetDataStatus"
	DataProcessingService_GetDataBySource_FullMethodName    = "/DataProcessingService/GetDataBySource"
	DataProcessingService_GetAllErrorReports_FullMethodName = "/DataProcessingService/GetAllErrorReports"
)

// DataProcessingServiceClient is the client API for DataProcessingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для обработки данных
type DataProcessingServiceClient interface {
	// Метод для обработки данных
	ProcessData(ctx context.Context, in *DataRecord, opts ...grpc.CallOption) (*ProcessResponse, error)
	// Метод для получения метаданных данных по ID
	GetMetadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error)
	// Метод для получения отчетов об ошибках для определенной записи данных
	GetErrorReport(ctx context.Context, in *ErrorReportRequest, opts ...grpc.CallOption) (*ErrorReportResponse, error)
	// Метод для потоковой передачи данных
	StreamData(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DataRecord, ProcessResponse], error)
	// Метод для получения списка записей данных с пагинацией
	ListDataRecords(ctx context.Context, in *ListDataRequest, opts ...grpc.CallOption) (*ListDataResponse, error)
	// Метод для удаления записи данных по ID
	DeleteDataRecord(ctx context.Context, in *DeleteDataRequest, opts ...grpc.CallOption) (*DeleteDataResponse, error)
	// Метод для обновления статуса записи данных
	UpdateDataStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error)
	// Метод для получения состояния данных (статуса)
	GetDataStatus(ctx context.Context, in *DataStatusRequest, opts ...grpc.CallOption) (*DataStatusResponse, error)
	// Метод для получения всех данных с определенного источника
	GetDataBySource(ctx context.Context, in *SourceDataRequest, opts ...grpc.CallOption) (*SourceDataResponse, error)
	// Метод для получения отчета о всех ошибках, связанный с данными
	GetAllErrorReports(ctx context.Context, in *AllErrorReportsRequest, opts ...grpc.CallOption) (*AllErrorReportsResponse, error)
}

type dataProcessingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataProcessingServiceClient(cc grpc.ClientConnInterface) DataProcessingServiceClient {
	return &dataProcessingServiceClient{cc}
}

func (c *dataProcessingServiceClient) ProcessData(ctx context.Context, in *DataRecord, opts ...grpc.CallOption) (*ProcessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessResponse)
	err := c.cc.Invoke(ctx, DataProcessingService_ProcessData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProcessingServiceClient) GetMetadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetadataResponse)
	err := c.cc.Invoke(ctx, DataProcessingService_GetMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProcessingServiceClient) GetErrorReport(ctx context.Context, in *ErrorReportRequest, opts ...grpc.CallOption) (*ErrorReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrorReportResponse)
	err := c.cc.Invoke(ctx, DataProcessingService_GetErrorReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProcessingServiceClient) StreamData(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DataRecord, ProcessResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataProcessingService_ServiceDesc.Streams[0], DataProcessingService_StreamData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DataRecord, ProcessResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataProcessingService_StreamDataClient = grpc.BidiStreamingClient[DataRecord, ProcessResponse]

func (c *dataProcessingServiceClient) ListDataRecords(ctx context.Context, in *ListDataRequest, opts ...grpc.CallOption) (*ListDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDataResponse)
	err := c.cc.Invoke(ctx, DataProcessingService_ListDataRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProcessingServiceClient) DeleteDataRecord(ctx context.Context, in *DeleteDataRequest, opts ...grpc.CallOption) (*DeleteDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDataResponse)
	err := c.cc.Invoke(ctx, DataProcessingService_DeleteDataRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProcessingServiceClient) UpdateDataStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStatusResponse)
	err := c.cc.Invoke(ctx, DataProcessingService_UpdateDataStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProcessingServiceClient) GetDataStatus(ctx context.Context, in *DataStatusRequest, opts ...grpc.CallOption) (*DataStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataStatusResponse)
	err := c.cc.Invoke(ctx, DataProcessingService_GetDataStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProcessingServiceClient) GetDataBySource(ctx context.Context, in *SourceDataRequest, opts ...grpc.CallOption) (*SourceDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SourceDataResponse)
	err := c.cc.Invoke(ctx, DataProcessingService_GetDataBySource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProcessingServiceClient) GetAllErrorReports(ctx context.Context, in *AllErrorReportsRequest, opts ...grpc.CallOption) (*AllErrorReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllErrorReportsResponse)
	err := c.cc.Invoke(ctx, DataProcessingService_GetAllErrorReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataProcessingServiceServer is the server API for DataProcessingService service.
// All implementations must embed UnimplementedDataProcessingServiceServer
// for forward compatibility.
//
// Сервис для обработки данных
type DataProcessingServiceServer interface {
	// Метод для обработки данных
	ProcessData(context.Context, *DataRecord) (*ProcessResponse, error)
	// Метод для получения метаданных данных по ID
	GetMetadata(context.Context, *MetadataRequest) (*MetadataResponse, error)
	// Метод для получения отчетов об ошибках для определенной записи данных
	GetErrorReport(context.Context, *ErrorReportRequest) (*ErrorReportResponse, error)
	// Метод для потоковой передачи данных
	StreamData(grpc.BidiStreamingServer[DataRecord, ProcessResponse]) error
	// Метод для получения списка записей данных с пагинацией
	ListDataRecords(context.Context, *ListDataRequest) (*ListDataResponse, error)
	// Метод для удаления записи данных по ID
	DeleteDataRecord(context.Context, *DeleteDataRequest) (*DeleteDataResponse, error)
	// Метод для обновления статуса записи данных
	UpdateDataStatus(context.Context, *UpdateStatusRequest) (*UpdateStatusResponse, error)
	// Метод для получения состояния данных (статуса)
	GetDataStatus(context.Context, *DataStatusRequest) (*DataStatusResponse, error)
	// Метод для получения всех данных с определенного источника
	GetDataBySource(context.Context, *SourceDataRequest) (*SourceDataResponse, error)
	// Метод для получения отчета о всех ошибках, связанный с данными
	GetAllErrorReports(context.Context, *AllErrorReportsRequest) (*AllErrorReportsResponse, error)
	mustEmbedUnimplementedDataProcessingServiceServer()
}

// UnimplementedDataProcessingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataProcessingServiceServer struct{}

func (UnimplementedDataProcessingServiceServer) ProcessData(context.Context, *DataRecord) (*ProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessData not implemented")
}
func (UnimplementedDataProcessingServiceServer) GetMetadata(context.Context, *MetadataRequest) (*MetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedDataProcessingServiceServer) GetErrorReport(context.Context, *ErrorReportRequest) (*ErrorReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetErrorReport not implemented")
}
func (UnimplementedDataProcessingServiceServer) StreamData(grpc.BidiStreamingServer[DataRecord, ProcessResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamData not implemented")
}
func (UnimplementedDataProcessingServiceServer) ListDataRecords(context.Context, *ListDataRequest) (*ListDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataRecords not implemented")
}
func (UnimplementedDataProcessingServiceServer) DeleteDataRecord(context.Context, *DeleteDataRequest) (*DeleteDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataRecord not implemented")
}
func (UnimplementedDataProcessingServiceServer) UpdateDataStatus(context.Context, *UpdateStatusRequest) (*UpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataStatus not implemented")
}
func (UnimplementedDataProcessingServiceServer) GetDataStatus(context.Context, *DataStatusRequest) (*DataStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataStatus not implemented")
}
func (UnimplementedDataProcessingServiceServer) GetDataBySource(context.Context, *SourceDataRequest) (*SourceDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataBySource not implemented")
}
func (UnimplementedDataProcessingServiceServer) GetAllErrorReports(context.Context, *AllErrorReportsRequest) (*AllErrorReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllErrorReports not implemented")
}
func (UnimplementedDataProcessingServiceServer) mustEmbedUnimplementedDataProcessingServiceServer() {}
func (UnimplementedDataProcessingServiceServer) testEmbeddedByValue()                               {}

// UnsafeDataProcessingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataProcessingServiceServer will
// result in compilation errors.
type UnsafeDataProcessingServiceServer interface {
	mustEmbedUnimplementedDataProcessingServiceServer()
}

func RegisterDataProcessingServiceServer(s grpc.ServiceRegistrar, srv DataProcessingServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataProcessingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataProcessingService_ServiceDesc, srv)
}

func _DataProcessingService_ProcessData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProcessingServiceServer).ProcessData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProcessingService_ProcessData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProcessingServiceServer).ProcessData(ctx, req.(*DataRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProcessingService_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProcessingServiceServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProcessingService_GetMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProcessingServiceServer).GetMetadata(ctx, req.(*MetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProcessingService_GetErrorReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProcessingServiceServer).GetErrorReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProcessingService_GetErrorReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProcessingServiceServer).GetErrorReport(ctx, req.(*ErrorReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProcessingService_StreamData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataProcessingServiceServer).StreamData(&grpc.GenericServerStream[DataRecord, ProcessResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataProcessingService_StreamDataServer = grpc.BidiStreamingServer[DataRecord, ProcessResponse]

func _DataProcessingService_ListDataRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProcessingServiceServer).ListDataRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProcessingService_ListDataRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProcessingServiceServer).ListDataRecords(ctx, req.(*ListDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProcessingService_DeleteDataRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProcessingServiceServer).DeleteDataRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProcessingService_DeleteDataRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProcessingServiceServer).DeleteDataRecord(ctx, req.(*DeleteDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProcessingService_UpdateDataStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProcessingServiceServer).UpdateDataStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProcessingService_UpdateDataStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProcessingServiceServer).UpdateDataStatus(ctx, req.(*UpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProcessingService_GetDataStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProcessingServiceServer).GetDataStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProcessingService_GetDataStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProcessingServiceServer).GetDataStatus(ctx, req.(*DataStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProcessingService_GetDataBySource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProcessingServiceServer).GetDataBySource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProcessingService_GetDataBySource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProcessingServiceServer).GetDataBySource(ctx, req.(*SourceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProcessingService_GetAllErrorReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllErrorReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProcessingServiceServer).GetAllErrorReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProcessingService_GetAllErrorReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProcessingServiceServer).GetAllErrorReports(ctx, req.(*AllErrorReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataProcessingService_ServiceDesc is the grpc.ServiceDesc for DataProcessingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataProcessingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DataProcessingService",
	HandlerType: (*DataProcessingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessData",
			Handler:    _DataProcessingService_ProcessData_Handler,
		},
		{
			MethodName: "GetMetadata",
			Handler:    _DataProcessingService_GetMetadata_Handler,
		},
		{
			MethodName: "GetErrorReport",
			Handler:    _DataProcessingService_GetErrorReport_Handler,
		},
		{
			MethodName: "ListDataRecords",
			Handler:    _DataProcessingService_ListDataRecords_Handler,
		},
		{
			MethodName: "DeleteDataRecord",
			Handler:    _DataProcessingService_DeleteDataRecord_Handler,
		},
		{
			MethodName: "UpdateDataStatus",
			Handler:    _DataProcessingService_UpdateDataStatus_Handler,
		},
		{
			MethodName: "GetDataStatus",
			Handler:    _DataProcessingService_GetDataStatus_Handler,
		},
		{
			MethodName: "GetDataBySource",
			Handler:    _DataProcessingService_GetDataBySource_Handler,
		},
		{
			MethodName: "GetAllErrorReports",
			Handler:    _DataProcessingService_GetAllErrorReports_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamData",
			Handler:       _DataProcessingService_StreamData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/data-integration.proto",
}